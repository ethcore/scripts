# .gitlab-ci.yml
# paritytech/scripts
#

stages:
  - build
  - test

variables:
  # DOCKER_HOST:                     tcp://docker:2375
  DOCKER_HOST:                     tcp://localhost:2375
  DOCKER_DRIVER:                   overlay2
  IMAGE_NAME:                      $CI_JOB_NAME
  IMAGE_TAG:                       latest
  REGISTRY_PATH:                   paritytech
  CI_REGISTRY_PATH:                "registry.parity.io/parity/infrastructure/scripts"


.build:                            &docker_build
  stage:                           build
  image:                           docker:stable
  variables:
    CI_DEBUG_TRACE: "true"
  # rules:
  #   # same as only: variables: $x
  #   - if: $CI_JOB_NAME == $DOCKERIMAGE && $CI_JOB_NAME == $IMAGE_NAME
  #     when: always
  #   # triggers rebuild when Dockerfile is changed
  #   - changes:
  #     - 'dockerfiles/${IMAGE_NAME}/Dockerfile'
  tags:
    - kubernetes-parity-build
  services:
    - docker:dind
  environment:
    name:                          parity-build

# Push to Dockerhub
.push_to_docker_hub:               &push_to_docker_hub
    - cd dockerfiles/
    - export IMAGE_DATE_TAG="${CI_COMMIT_SHORT_SHA}-$(date +%Y%m%d)"
    - docker build --no-cache
        --build-arg VCS_REF="${CI_COMMIT_SHA}"
        --build-arg BUILD_DATE="$(date +%Y%m%d)"
        --build-arg REGISTRY_PATH=$REGISTRY_PATH
        --tag $REGISTRY_PATH/$IMAGE_NAME:$IMAGE_DATE_TAG
        --tag $REGISTRY_PATH/$IMAGE_NAME:$IMAGE_TAG
        --file $IMAGE_NAME/Dockerfile .
    - docker login -u "${DOCKER_USER}" -p "${DOCKER_PASSWORD}"
    - docker info
    - docker push $REGISTRY_PATH/$IMAGE_NAME:$IMAGE_DATE_TAG
    - docker push $REGISTRY_PATH/$IMAGE_NAME:$IMAGE_TAG
    - docker logout

# Push to CI registry
# TODO: remove when fully switching to dockerhub
.push_to_own_reg:                  &push_to_own_reg
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker tag $REGISTRY_PATH/$IMAGE_NAME:$IMAGE_DATE_TAG $CI_REGISTRY_PATH/$IMAGE_NAME:$IMAGE_DATE_TAG
    - docker tag $REGISTRY_PATH/$IMAGE_NAME:$IMAGE_TAG $CI_REGISTRY_PATH/$IMAGE_NAME:$IMAGE_TAG
    - docker push $CI_REGISTRY_PATH/$IMAGE_NAME:$IMAGE_DATE_TAG
    - docker push $CI_REGISTRY_PATH/$IMAGE_NAME:$IMAGE_TAG
    - docker logout


#Build and push to docker hub and CI registry
base-ci-linux:
  <<:                              *docker_build
  script:
    - *push_to_docker_hub
    - *push_to_own_reg

substrate-ci-linux:
  <<:                              *docker_build
  script:
    - *push_to_docker_hub
    - *push_to_own_reg

ink-ci-linux:
  <<:                              *docker_build
  script:
    - *push_to_docker_hub
    - *push_to_own_reg

contracts-ci-linux:
  <<:                              *docker_build
  script:
    - *push_to_docker_hub
    - *push_to_own_reg

awscli:
  <<:                              *docker_build
  rules:
    # same as only: variables: $x
    - if: $CI_JOB_NAME == $DOCKERIMAGE
      when: always
  script:
    - *push_to_docker_hub
    - *push_to_own_reg

tools:
  <<:                              *docker_build
  rules:
    # same as only: variables: $x
    - if: $CI_JOB_NAME == $DOCKERIMAGE && $CI_JOB_NAME == $IMAGE_NAME
      when: always
  script:
    - *push_to_docker_hub

query-exporter:
  <<:                              *docker_build
  script:
    - *push_to_docker_hub

redis-exporter:
  <<:                              *docker_build
  rules:
    # same as only: variables: $x
    - if: $CI_JOB_NAME == $IMAGE_NAME
      when: always
  script:
    - *push_to_docker_hub

# build k8s on top of node 12-alpine
chaostools:
  <<:                              *docker_build
  variables:
    # https://github.com/kubernetes/kubernetes/releases
    BUILD_KUBE_VERSION:            "1.14.6"
  script:
    - |
      cat <<-EOT
      |
      | # build of chaostools image
      |
      | KUBE_VERSION = ${BUILD_KUBE_VERSION}
      |
      EOT
    - cd dockerfiles/
    - docker build
      --build-arg VCS_REF="${CI_COMMIT_SHA}"
      --build-arg BUILD_DATE="$(date -u '+%Y-%m-%dT%H:%M:%SZ')"
      --build-arg REGISTRY_PATH=$REGISTRY_PATH
      --build-arg KUBE_VERSION="${BUILD_KUBE_VERSION}"
      --tag $REGISTRY_PATH/$IMAGE_NAME:$IMAGE_TAG
      --file $IMAGE_NAME/Dockerfile .
    # Push to Dockerhub
    - docker login -u "${DOCKER_USER}" -p "${DOCKER_PASSWORD}"
    - docker info
    - docker push $REGISTRY_PATH/$IMAGE_NAME:$IMAGE_TAG
    - docker logout

# special case as version tags are introduced
kubetools:
  <<:                              *docker_build
  variables:
    # https://github.com/kubernetes/kubernetes/releases
    BUILD_KUBE_VERSION:            "1.18.2"
    # https://github.com/kubernetes/helm/releases
    # will be overwritten by the global variable at
    # https://gitlab.parity.io/groups/parity/-/settings/ci_cd
    BUILD_HELM_VERSION:            "2.16.6"
  script:
    - |
      cat <<-EOT
      |
      | # build of kubetools image
      |
      | KUBE_VERSION = ${BUILD_KUBE_VERSION}
      | HELM_VERSION = ${BUILD_HELM_VERSION}
      |
      EOT
    - cd dockerfiles/
    - docker build
      --build-arg VCS_REF="${CI_COMMIT_SHA}"
      --build-arg BUILD_DATE="$(date -u '+%Y-%m-%dT%H:%M:%SZ')"
      --build-arg REGISTRY_PATH=$REGISTRY_PATH
      --build-arg KUBE_VERSION="${BUILD_KUBE_VERSION}"
      --build-arg HELM_VERSION="${BUILD_HELM_VERSION}"
      --tag $REGISTRY_PATH/$IMAGE_NAME:$IMAGE_TAG
      --tag $REGISTRY_PATH/$IMAGE_NAME:$BUILD_HELM_VERSION
      --file $IMAGE_NAME/Dockerfile .
    # Push to Dockerhub
    - docker login -u "${DOCKER_USER}" -p "${DOCKER_PASSWORD}"
    - docker info
    - docker push $REGISTRY_PATH/$IMAGE_NAME:$IMAGE_TAG
    - docker push $REGISTRY_PATH/$IMAGE_NAME:$BUILD_HELM_VERSION
    - docker logout


terraform:
  <<:                              *docker_build
  variables:
    # https://releases.hashicorp.com/terraform/
    TERRAFORM_VERSION:             "0.12.24"
  script:
    - |
      cat <<-EOT
      |
      | # build of terraform image
      |
      | TERRAFORM_VERSION = ${TERRAFORM_VERSION}
      |
      EOT
    - cd dockerfiles/
    - docker build
      --build-arg VCS_REF="${CI_COMMIT_SHA}"
      --build-arg BUILD_DATE="$(date -u '+%Y-%m-%dT%H:%M:%SZ')"
      --build-arg REGISTRY_PATH=$REGISTRY_PATH
      --build-arg TERRAFORM_VERSION="${TERRAFORM_VERSION}"
      --tag $REGISTRY_PATH/$IMAGE_NAME:$IMAGE_TAG
      --tag $REGISTRY_PATH/$IMAGE_NAME:$TERRAFORM_VERSION
      --file $IMAGE_NAME/Dockerfile .
    # Push to Dockerhub
    - docker login -u "${DOCKER_USER}" -p "${DOCKER_PASSWORD}"
    - docker info
    - docker push $REGISTRY_PATH/$IMAGE_NAME:$IMAGE_TAG
    - docker push $REGISTRY_PATH/$IMAGE_NAME:$TERRAFORM_VERSION
    - docker logout


# triggers on $DOCKERIMAGE
# in order to be scanned, EVERY docker build HAS to have $REGISTRY_PATH/$IMAGE_NAME:$IMAGE_TAG
container_scanning:
  # Template does not work, had to reimplement its config from
  # https://gitlab.com/gitlab-org/gitlab/blob/master/lib/gitlab/ci/templates/Security/Container-Scanning.gitlab-ci.yml
  stage:                           test
  image:                           $SECURE_ANALYZERS_PREFIX/klar:$CS_MAJOR_VERSION
  variables:
    # these variables are from the template
    SECURE_ANALYZERS_PREFIX:       "registry.gitlab.com/gitlab-org/security-products/analyzers"
    CS_MAJOR_VERSION:              2
    CLAIR_DB_IMAGE_TAG:            "latest"
    CLAIR_DB_IMAGE:                "$SECURE_ANALYZERS_PREFIX/clair-vulnerabilities-db:$CLAIR_DB_IMAGE_TAG"
    # these are our custom variables
    GIT_STRATEGY:                  fetch
    CI_APPLICATION_REPOSITORY:     $REGISTRY_PATH/$DOCKERIMAGE
    CI_APPLICATION_TAG:            $IMAGE_TAG # OR $IMAGE_DATE_TAG
    DOCKERFILE_PATH:               "dockerfiles/${DOCKERIMAGE}"
  allow_failure:                   true
  services:
    - name:                        $CLAIR_DB_IMAGE
      alias:                       clair-vulnerabilities-db
  script:
    - /analyzer run
  artifacts:
    reports:
      container_scanning:          gl-container-scanning-report.json
  dependencies: []
  rules:
    # same as only: variables: $x
    - if:                          '$DOCKERIMAGE'
      when:                        always
    # triggers rebuild when Dockerfile is changed
    - changes:
      - 'dockerfiles/${IMAGE_NAME}/Dockerfile'

# vim: expandtab sts=2
